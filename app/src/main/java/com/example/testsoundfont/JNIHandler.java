package com.example.testsoundfont;

import android.content.Context;
import android.media.AudioTrack;
import android.os.Environment;
import android.widget.Toast;

import com.example.testsoundfont.enums.AppKeys;
import com.example.testsoundfont.models.SoundFont;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import lombok.Getter;

/**
 * Created by Administrator on 2016-03-08.
 */
public class JNIHandler {

    public static final String autoSoundfontHeader = "#<--------Config Generated By Timidity AE (DO NOT MODIFY)-------->";
    public static String[] sampls = { "Cubic Spline", "Lagrange", "Gaussian", "Newton", "Linear", "None" };

    private Context c;

    @Getter
    private File rootStorage = null;

    public static void init(Context c) {
        instance.c = c;
        instance.rootStorage = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/vpang_test/");
        if (!instance.rootStorage.exists()) {
            instance.rootStorage.mkdir();
        }

        File sfDir = new File(instance.rootStorage.getAbsolutePath() + "/soundfonts/");
        if (!sfDir.exists()) {
            sfDir.mkdir();
        }

        instance.loadTimidityConfig();
    }

    public void loadTimidityConfig() {
        List<SoundFont> sfs = (List<SoundFont>) App.getInstance().getObjectList(AppKeys.ALL_SOUNDFONT);
        if (sfs == null || sfs.size() == 0) {
            Toast.makeText(c, "Soundfonts null", Toast.LENGTH_LONG).show();
            return;
        }

        writeCfg(c, rootStorage.getAbsolutePath() + "/timidity.cfg", sfs);
    }

    public void writeCfg(Context c, String path, List<SoundFont> sfs) {
        if(path == null) {
            Toast.makeText(c, "Configuration path null", Toast.LENGTH_LONG).show();
            return;
        }

        try {
            FileWriter fw = new FileWriter(path, false);
            fw.write(autoSoundfontHeader);
            fw.write("\n");

            for(SoundFont sf : sfs) {
                fw.write("soundfont \"" + sf.getFilePath() + sf.getSfName() + "\"" + "\n");
            }
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static JNIHandler instance = null;
    public static JNIHandler getInstance(Context context) {
        if(instance == null) {
            instance = new JNIHandler();
            instance.init(context);
        }
        return instance;
    }

    public static int play(Context context, AudioTrack audioTrack,  String songTitle) {
        if(!new File(songTitle).exists()) {
            return -9;
        }
    }

    //public static native void controlTimidity(int jcmd, int jcmdArg); Timidity옵션을 컨트롤하는 소스. 안쓰일듯
    public static native void setChannelTimidity(int jchan, int jprog);
    public static native int setResampleTimidity(int jcustResamp);
    public static native int loadLib(String libPath);
    public static native boolean timidityReady();

    private static native int loadSongTimidity(String filename);
    private static native int prepareTimidity(String config, String config2, int jmono, int jcustResamp, int jsixteen,
                                              int jPresSil, int jreloading, int jfreeInsts);
}
